{"version":3,"sources":["../../app/controllers/user_controller.js"],"names":["UserController","UserService","req","res","userdetails","body","userExist","userExistBefore","email","userList","undefined","permission","isAdmin","token","jwt","sign","process","env","SECRET_KEY","expiresIn","addNewUser","status","json","Data","userKey","validatepass","password","tokens","id","msg"],"mappings":";;;;;;;AAAA;;AACA;;AACA;;;;;;;;;;IAGMA,c;;;AACF,4BAAc;AAAA;;AACV,SAAKC,WAAL,GAAmB,IAAIA,uBAAJ,EAAnB;AACH;;;;2BAEMC,G,EAAKC,G,EAAK;AACb,UAAMC,WAAW,GAAGF,GAAG,CAACG,IAAxB;AACA,UAAMC,SAAS,GAAG,KAAKL,WAAL,CAAiBM,eAAjB,CAAiCH,WAAW,CAACI,KAA7C,CAAlB;AACA,UAAIC,QAAJ;;AACA,UAAIH,SAAS,KAAKI,SAAlB,EAA6B;AACzBN,QAAAA,WAAW,CAACO,UAAZ,GAAyBP,WAAW,CAACQ,OAAZ,KAAwB,IAAxB,GAA+B,OAA/B,GAAyC,MAAlE;;AACA,YAAMC,KAAK,GAAGC,yBAAIC,IAAJ,CAAS;AAAEP,UAAAA,KAAK,EAAEJ,WAAW,CAACI,KAArB;AAA4BG,UAAAA,UAAU,EAAEP,WAAW,CAACO;AAApD,SAAT,EAA2EK,OAAO,CAACC,GAAR,CAAYC,UAAvF,EAAmG;AAAEC,UAAAA,SAAS,EAAE;AAAb,SAAnG,CAAd;;AACAf,QAAAA,WAAW,CAACS,KAAZ,GAAoBA,KAApB;AACAJ,QAAAA,QAAQ,GAAG,KAAKR,WAAL,CAAiBmB,UAAjB,CAA4BhB,WAA5B,CAAX;AACH;;AACD,aAAOD,GAAG,CAACkB,MAAJ,CAAWZ,QAAQ,KAAKC,SAAb,GAAyB,GAAzB,GAA+B,GAA1C,EAA+CY,IAA/C,CAAoD;AACvDD,QAAAA,MAAM,EAAEZ,QAAQ,KAAKC,SAAb,GAAyB,GAAzB,GAA+B,GADgB;AAEvDa,QAAAA,IAAI,EAAEd,QAAQ,KAAKC,SAAb,GAAyB,qBAAzB,GAAiDD;AAFA,OAApD,CAAP;AAKH;;;2BAEMP,G,EAAKC,G,EAAK;AACb,UAAMqB,OAAO,GAAGtB,GAAG,CAACG,IAApB;AACA,UAAMC,SAAS,GAAG,KAAKL,WAAL,CAAiBM,eAAjB,CAAiCiB,OAAO,CAAChB,KAAzC,CAAlB;;AACA,UAAIF,SAAS,KAAKI,SAAlB,EAA6B;AACzB,YAAMe,YAAY,GAAG,8BAAcD,OAAO,CAACE,QAAtB,EAAgCpB,SAAS,CAACoB,QAA1C,CAArB,CADyB,CAEzB;;AACA,YAAID,YAAJ,EAAkB;AACd,cAAME,MAAM,GAAGb,yBAAIC,IAAJ,CAAS;AAAEP,YAAAA,KAAK,EAAEF,SAAS,CAACE,KAAnB;AAA0BoB,YAAAA,EAAE,EAAEtB,SAAS,CAACsB;AAAxC,WAAT,EAAuDZ,OAAO,CAACC,GAAR,CAAYC,UAAnE,EAA+E;AAAEC,YAAAA,SAAS,EAAE;AAAb,WAA/E,CAAf;;AACAb,UAAAA,SAAS,CAACO,KAAV,GAAkBc,MAAlB;AACA,iBAAOxB,GAAG,CAACkB,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AACxBD,YAAAA,MAAM,EAAE,GADgB;AAExBE,YAAAA,IAAI,EAAEjB;AAFkB,WAArB,CAAP;AAIH;;AACD,eAAOH,GAAG,CAACkB,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AACxBD,UAAAA,MAAM,EAAE,GADgB;AAExBQ,UAAAA,GAAG,EAAE;AAFmB,SAArB,CAAP;AAKH;;AACD,aAAO1B,GAAG,CAACkB,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AACxBD,QAAAA,MAAM,EAAE,GADgB;AAExBQ,QAAAA,GAAG,EAAE;AAFmB,OAArB,CAAP;AAIH;;;;;;eAGU7B,c","sourcesContent":["import jwt from 'jsonwebtoken';\r\nimport UserService from '../services/userService';\r\nimport validPassword from '../../utils/validatepass';\r\n\r\n\r\nclass UserController {\r\n    constructor() {\r\n        this.UserService = new UserService();\r\n    }\r\n\r\n    SignUp(req, res) {\r\n        const userdetails = req.body;\r\n        const userExist = this.UserService.userExistBefore(userdetails.email);\r\n        let userList;\r\n        if (userExist === undefined) {\r\n            userdetails.permission = userdetails.isAdmin === true ? 'admin' : 'user';\r\n            const token = jwt.sign({ email: userdetails.email, permission: userdetails.permission }, process.env.SECRET_KEY, { expiresIn: '1h' });\r\n            userdetails.token = token;\r\n            userList = this.UserService.addNewUser(userdetails);\r\n        }\r\n        return res.status(userList === undefined ? 422 : 201).json({\r\n            status: userList === undefined ? 422 : 201,\r\n            Data: userList === undefined ? 'user already Exists' : userList,\r\n        });\r\n\r\n    }\r\n\r\n    SignIn(req, res) {\r\n        const userKey = req.body;\r\n        const userExist = this.UserService.userExistBefore(userKey.email);\r\n        if (userExist !== undefined) {\r\n            const validatepass = validPassword(userKey.password, userExist.password);\r\n            // eslint-disable-next-line space-before-blocks\r\n            if (validatepass) {\r\n                const tokens = jwt.sign({ email: userExist.email, id: userExist.id }, process.env.SECRET_KEY, { expiresIn: '1h' });\r\n                userExist.token = tokens;\r\n                return res.status(200).json({\r\n                    status: 200,\r\n                    Data: userExist,\r\n                });\r\n            }\r\n            return res.status(401).json({\r\n                status: 401,\r\n                msg: 'wrong password.........',\r\n            });\r\n\r\n        }\r\n        return res.status(404).json({\r\n            status: 404,\r\n            msg: 'user account not found',\r\n        });\r\n    }\r\n\r\n}\r\nexport default UserController;\r\n"],"file":"user_controller.js"}